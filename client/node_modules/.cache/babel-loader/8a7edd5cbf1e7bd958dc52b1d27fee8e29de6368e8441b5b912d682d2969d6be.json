{"ast":null,"code":"var _jsxFileName = \"/Users/aadikulsh/Documents/JS Projects/Zombie Fighter Redux/client/src/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport grassTile from \"./sprites/tiles/grass.png\";\nimport pistolPlayer from \"./sprites/player/pistol.png\";\nimport bullet from \"./sprites/projectiles/bullet.png\";\nimport muzzleFlash from \"./sprites/effects/muzzleFlash.png\";\nimport zombie from \"./sprites/enemies/zombie.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction sqrtApprox(num) {\n  let s = (num / 2 + num / (num / 2)) / 2;\n  for (let i = 1; i <= 4; i++) {\n    s = (s + num / s) / 2;\n  }\n  return s;\n}\nfunction Game({\n  spawned,\n  setSpawned,\n  ...props\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  let waveStarted = false;\n  let playerPos = {\n    x: 0,\n    y: 0\n  };\n  let wDown = false;\n  let aDown = false;\n  let sDown = false;\n  let dDown = false;\n  let mousePos = {\n    x: 0,\n    y: 0\n  };\n  let playerRotation = 0;\n  let bullets = [];\n  let canShoot = true;\n  let drawFlash = false;\n  let zombies = [];\n  let died = false;\n  function shoot(x, y, spread, speed, offsetX, offsetY) {\n    const direction = playerRotation * -1 - Math.PI / 2 + Math.random() * spread / 100 - spread / 200;\n    let vx = Math.cos(direction) * speed;\n    let vy = Math.sin(direction) * -1 * speed;\n    let xAdd = Math.cos(playerRotation) * offsetX + Math.cos(playerRotation + Math.PI / 2) * offsetY;\n    let yAdd = Math.sin(playerRotation) * offsetX + Math.sin(playerRotation + Math.PI / 2) * offsetY;\n    bullets.push({\n      x: x + xAdd,\n      y: y + yAdd,\n      vx: vx,\n      vy: vy\n    });\n    drawFlash = true;\n  }\n  const draw = (ctx, frameCount, sprites) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Draw background\n    const rotations = [0, Math.PI / 2, Math.PI, Math.PI * 3 / 2];\n    for (let i = 0; i < size.width; i += 48) {\n      for (let j = 0; j < size.height; j += 48) {\n        ctx.save();\n        ctx.translate(i, j);\n        ctx.rotate(Math.PI * (i + j));\n        ctx.drawImage(sprites.grassImg, 0, 0);\n        ctx.restore();\n      }\n    }\n    if (spawned) {\n      // Draw player\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + playerPos.x, ctx.canvas.height / 2 + playerPos.y);\n      ctx.rotate(playerRotation);\n      ctx.drawImage(sprites.pistolPlayerImg, -sprites.pistolPlayerImg.width / 2, -sprites.pistolPlayerImg.height / 2);\n      ctx.restore();\n    }\n\n    // Draw bullets\n    for (let i = 0; i < bullets.length; i++) {\n      ctx.drawImage(sprites.bulletImg, bullets[i].x + ctx.canvas.width / 2 - sprites.bulletImg.width / 2, bullets[i].y + ctx.canvas.height / 2 - sprites.bulletImg.height / 2);\n    }\n\n    // Draw muzzle flash if necessary\n    if (drawFlash) {\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + playerPos.x, ctx.canvas.height / 2 + playerPos.y);\n      ctx.rotate(playerRotation);\n      ctx.drawImage(sprites.muzzleFlashImg, -sprites.muzzleFlashImg.width / 2 + 5.5, -sprites.muzzleFlashImg.height / 2 + 39);\n      ctx.restore();\n      setTimeout(() => drawFlash = false, 100);\n    }\n\n    // Draw zombies\n    for (let i = 0; i < zombies.length; i++) {\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + zombies[i].x, ctx.canvas.height / 2 + zombies[i].y);\n      const dx = playerPos.x - zombies[i].x;\n      const dy = playerPos.y - zombies[i].y;\n      let zombieRotation = Math.atan(Math.abs(dy) / Math.abs(dx));\n      if (dx < 0 && dy > 0) {\n        zombieRotation += Math.PI;\n      } else if (dx < 0) {\n        zombieRotation *= -1;\n        zombieRotation += Math.PI;\n      } else if (dy > 0) {\n        zombieRotation *= -1;\n        zombieRotation += 0;\n      }\n      zombieRotation += Math.PI / 2;\n      zombieRotation *= -1;\n      ctx.rotate(zombieRotation);\n      ctx.drawImage(sprites.zombieImg, -sprites.zombieImg.width / 2, -sprites.zombieImg.height / 2);\n      ctx.restore();\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const fps = 60;\n\n    // Load images\n    const grassImg = new Image();\n    grassImg.src = grassTile;\n    const pistolPlayerImg = new Image();\n    pistolPlayerImg.src = pistolPlayer;\n    const bulletImg = new Image();\n    bulletImg.src = bullet;\n    const muzzleFlashImg = new Image();\n    muzzleFlashImg.src = muzzleFlash;\n    const zombieImg = new Image();\n    zombieImg.src = zombie;\n\n    // Scale canvas with screen resize\n    let resizeTimer;\n    window.addEventListener('resize', e => {\n      clearTimeout(resizeTimer);\n      resizeTimer = setTimeout(() => setSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      }), 100);\n    });\n\n    // Get mouse movements\n    window.addEventListener(\"mousemove\", e => {\n      mousePos.x = e.clientX;\n      mousePos.y = e.clientY;\n    });\n\n    // Track player inputs\n    document.addEventListener('keydown', event => {\n      if (event.key === 'w') wDown = true;\n      if (event.key === 's') sDown = true;\n      if (event.key === 'd') dDown = true;\n      if (event.key === 'a') aDown = true;\n    });\n    document.addEventListener('keyup', event => {\n      if (event.key === 'w') wDown = false;\n      if (event.key === 's') sDown = false;\n      if (event.key === 'd') dDown = false;\n      if (event.key === 'a') aDown = false;\n    });\n    document.addEventListener('mousedown', event => {\n      if (spawned && canShoot) {\n        shoot(playerPos.x, playerPos.y, 15, 9, 7, 29);\n        canShoot = false;\n        setTimeout(() => canShoot = true, 500);\n      }\n    });\n    let frameCount = 0;\n    let animationFrameId;\n\n    // Game loop\n    const render = () => {\n      frameCount++;\n\n      // Move player\n      if (wDown && spawned) playerPos.y -= 4;\n      if (sDown && spawned) playerPos.y += 4;\n      if (aDown && spawned) playerPos.x -= 4;\n      if (dDown && spawned) playerPos.x += 4;\n\n      // Get player rotation\n      const playerScreenPos = {\n        x: playerPos.x + context.canvas.width / 2,\n        y: playerPos.y + context.canvas.height / 2\n      };\n      const dx = mousePos.x - playerScreenPos.x;\n      const dy = mousePos.y - playerScreenPos.y;\n      playerRotation = Math.atan(Math.abs(dy) / Math.abs(dx));\n      if (dx < 0 && dy > 0) {\n        playerRotation += Math.PI;\n      } else if (dx < 0) {\n        playerRotation *= -1;\n        playerRotation += Math.PI;\n      } else if (dy > 0) {\n        playerRotation *= -1;\n        playerRotation += 0;\n      }\n      playerRotation += Math.PI / 2;\n      playerRotation *= -1;\n      if (!died) {\n        // Move bullets\n        let newBullets = [];\n        for (let i = bullets.length - 1; i >= 0; i--) {\n          bullets[i].x += bullets[i].vx;\n          bullets[i].y += bullets[i].vy;\n          if (!(bullets[i].x + context.canvas.width / 2 > context.canvas.width || bullets[i].x + context.canvas.width / 2 < 0 || bullets[i].y + context.canvas.height / 2 < 0 || bullets[i].y + context.canvas.height / 2 > context.canvas.height)) {\n            newBullets.push(bullets[i]);\n          }\n        }\n        bullets = newBullets;\n\n        // Move zombies and detect if player died\n        for (let i = 0; i < zombies.length; i++) {\n          const distance = sqrtApprox((zombies[i].x - playerPos.x) ** 2 + (zombies[i].y - playerPos.y) ** 2);\n          if (distance < 35) {\n            died = true;\n            setTimeout(() => {\n              setSpawned(false);\n            }, 100);\n          }\n        }\n      }\n\n      // Draw frame\n      draw(context, frameCount, {\n        grassImg: grassImg,\n        pistolPlayerImg: pistolPlayerImg,\n        bulletImg: bulletImg,\n        muzzleFlashImg: muzzleFlashImg,\n        zombieImg: zombieImg\n      });\n      animationFrameId = setTimeout(render, 1000 / fps);\n    };\n    render();\n    return () => {\n      clearTimeout(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: size.width,\n      height: size.height,\n      style: {\n        zIndex: \"-1\",\n        position: \"fixed\",\n        left: \"0vw\",\n        top: \"0vw\"\n      },\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 5\n    }, this), spawned && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => {\n        waveStarted = true;\n        e.target.style.display = \"none\";\n        zombies.push({\n          x: 150,\n          y: 150\n        });\n      },\n      className: \"textButton strokedText3 pixelFont textColor\",\n      style: {\n        fontSize: \"3vw\",\n        position: \"absolute\",\n        left: \"1vw\",\n        top: \"1vw\"\n      },\n      children: \"Start Wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"puhKU6xUq7Q7hi5BXB6BjdEOaU0=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useRef","useEffect","useState","grassTile","pistolPlayer","bullet","muzzleFlash","zombie","jsxDEV","_jsxDEV","Fragment","_Fragment","sqrtApprox","num","s","i","Game","spawned","setSpawned","props","_s","canvasRef","size","setSize","width","window","innerWidth","height","innerHeight","waveStarted","playerPos","x","y","wDown","aDown","sDown","dDown","mousePos","playerRotation","bullets","canShoot","drawFlash","zombies","died","shoot","spread","speed","offsetX","offsetY","direction","Math","PI","random","vx","cos","vy","sin","xAdd","yAdd","push","draw","ctx","frameCount","sprites","clearRect","canvas","rotations","j","save","translate","rotate","drawImage","grassImg","restore","pistolPlayerImg","length","bulletImg","muzzleFlashImg","setTimeout","dx","dy","zombieRotation","atan","abs","zombieImg","current","context","getContext","fps","Image","src","resizeTimer","addEventListener","e","clearTimeout","clientX","clientY","document","event","key","animationFrameId","render","playerScreenPos","newBullets","distance","children","style","zIndex","position","left","top","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","target","display","className","fontSize","_c","$RefreshReg$"],"sources":["/Users/aadikulsh/Documents/JS Projects/Zombie Fighter Redux/client/src/Game.js"],"sourcesContent":["import React, { useRef, useEffect, useState} from 'react'\nimport grassTile from \"./sprites/tiles/grass.png\"\nimport pistolPlayer from \"./sprites/player/pistol.png\"\nimport bullet from \"./sprites/projectiles/bullet.png\"\nimport muzzleFlash from \"./sprites/effects/muzzleFlash.png\"\nimport zombie from \"./sprites/enemies/zombie.png\"\n\nfunction sqrtApprox(num) {\n  let s = ((num/2) + num/(num/2))/2;\n  for (let i = 1; i <= 4; i++) {\n    s = (s+num/s)/2\n  }\n  return s\n}\n\nfunction Game({spawned, setSpawned, ...props}) {\n  \n  const canvasRef = useRef(null)\n  const [size, setSize] = useState({width: window.innerWidth, height: window.innerHeight})\n  let waveStarted = false\n  let playerPos = {x: 0, y: 0};\n  let wDown = false;\n  let aDown = false;\n  let sDown = false;\n  let dDown = false;\n  let mousePos = {x: 0, y: 0};\n  let playerRotation = 0;\n  let bullets = []\n  let canShoot = true;\n  let drawFlash = false;\n  let zombies = []\n  let died = false;\n  \n  function shoot (x, y, spread, speed, offsetX, offsetY) {\n    const direction = (playerRotation * -1) - Math.PI/2 + Math.random()*spread/100-spread/200;\n    let vx = Math.cos(direction) * speed;\n    let vy = Math.sin(direction) * -1 * speed;\n    let xAdd = Math.cos(playerRotation) * offsetX + Math.cos(playerRotation + Math.PI/2) * offsetY;\n    let yAdd = (Math.sin(playerRotation) * offsetX + Math.sin(playerRotation + Math.PI/2) * offsetY);\n    bullets.push({x: x + xAdd, y: y + yAdd, vx: vx, vy: vy})\n    drawFlash = true;\n  }\n\n  const draw = (ctx, frameCount, sprites) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    // Draw background\n    const rotations = [0, Math.PI/2, Math.PI, Math.PI*3/2]\n    for (let i = 0; i < size.width; i+= 48) {\n      for (let j = 0; j < size.height; j+= 48) {\n        ctx.save();\n        \n        ctx.translate(i, j)\n        ctx.rotate(Math.PI*(i + j))\n        ctx.drawImage(sprites.grassImg, 0, 0)\n        ctx.restore()\n      }\n    }\n\n    if (spawned) {\n      // Draw player\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + playerPos.x, ctx.canvas.height/2 + playerPos.y)\n      ctx.rotate(playerRotation)\n      ctx.drawImage(sprites.pistolPlayerImg, -sprites.pistolPlayerImg.width/2, -sprites.pistolPlayerImg.height/2)\n      ctx.restore()\n    }\n    \n    // Draw bullets\n    for (let i = 0; i < bullets.length; i++) {\n      ctx.drawImage(sprites.bulletImg, bullets[i].x + ctx.canvas.width/2 - sprites.bulletImg.width/2, bullets[i].y + ctx.canvas.height/2  - sprites.bulletImg.height/2);\n    }\n\n    // Draw muzzle flash if necessary\n    if (drawFlash) {\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + playerPos.x, ctx.canvas.height/2 + playerPos.y)\n      ctx.rotate(playerRotation)\n      ctx.drawImage(sprites.muzzleFlashImg, -sprites.muzzleFlashImg.width/2 + 5.5, -sprites.muzzleFlashImg.height/2 + 39)\n      ctx.restore()\n      setTimeout(() => drawFlash=false, 100)\n    }\n\n    // Draw zombies\n    for (let i = 0; i < zombies.length; i++) {\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + zombies[i].x, ctx.canvas.height/2 + zombies[i].y)\n      const dx = playerPos.x - zombies[i].x;\n      const dy = playerPos.y - zombies[i].y;\n      let zombieRotation = Math.atan(Math.abs(dy)/Math.abs(dx))\n      if(dx < 0 && dy > 0) {\n        zombieRotation += Math.PI;\n      }\n      else if (dx < 0) {\n        zombieRotation *= -1\n        zombieRotation += Math.PI;\n      }\n      else if (dy > 0) {\n        zombieRotation *= -1;\n        zombieRotation += 0;\n      }\n      zombieRotation += Math.PI/2;\n      zombieRotation *= -1\n      ctx.rotate(zombieRotation)\n      ctx.drawImage(sprites.zombieImg, -sprites.zombieImg.width/2, -sprites.zombieImg.height/2)\n      ctx.restore()\n    }\n    \n  }\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    const fps = 60;\n\n    // Load images\n    const grassImg = new Image();\n    grassImg.src=grassTile;\n    const pistolPlayerImg = new Image();\n    pistolPlayerImg.src=pistolPlayer\n    const bulletImg = new Image();\n    bulletImg.src = bullet;\n    const muzzleFlashImg = new Image();\n    muzzleFlashImg.src = muzzleFlash;\n    const zombieImg = new Image();\n    zombieImg.src = zombie;\n  \n    // Scale canvas with screen resize\n    let resizeTimer;\n    window.addEventListener('resize', (e) => {\n      clearTimeout(resizeTimer)\n      resizeTimer = setTimeout(() => setSize({width: window.innerWidth, height: window.innerHeight }), 100)\n    })\n\n    // Get mouse movements\n    window.addEventListener(\"mousemove\", (e) => {\n      mousePos.x = e.clientX;\n      mousePos.y = e.clientY;\n    })\n\n    // Track player inputs\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'w') wDown = true;\n      if (event.key === 's') sDown = true;\n      if (event.key === 'd') dDown = true;\n      if (event.key === 'a') aDown = true;\n    });\n\n    document.addEventListener('keyup', (event) => {\n      if (event.key === 'w') wDown = false;\n      if (event.key === 's') sDown = false;\n      if (event.key === 'd') dDown = false;\n      if (event.key === 'a') aDown = false;\n    });\n\n    document.addEventListener('mousedown', (event) => {\n      if (spawned && canShoot) {\n        shoot(playerPos.x, playerPos.y, 15, 9, 7, 29);\n        canShoot = false;\n        setTimeout(() => canShoot = true, 500)\n      }\n      \n    })\n\n    let frameCount = 0\n    let animationFrameId\n    \n    // Game loop\n    const render = () => {\n      frameCount++\n\n      // Move player\n      if (wDown && spawned) playerPos.y -= 4;\n      if (sDown && spawned) playerPos.y += 4;\n      if (aDown && spawned) playerPos.x -= 4;\n      if (dDown && spawned) playerPos.x += 4;\n\n      // Get player rotation\n      const playerScreenPos = {x: playerPos.x + context.canvas.width/2, y: playerPos.y + context.canvas.height/2}\n      const dx = mousePos.x - playerScreenPos.x;\n      const dy = mousePos.y - playerScreenPos.y;\n      playerRotation = Math.atan(Math.abs(dy)/Math.abs(dx))\n      if(dx < 0 && dy > 0) {\n        playerRotation += Math.PI;\n      }\n      else if (dx < 0) {\n        playerRotation *= -1\n        playerRotation += Math.PI;\n      }\n      else if (dy > 0) {\n        playerRotation *= -1;\n        playerRotation += 0;\n      }\n      playerRotation += Math.PI/2;\n      playerRotation *= -1\n      \n      if (!died) {\n        // Move bullets\n        let newBullets = []\n        for (let i = bullets.length-1; i >= 0; i--) {\n          bullets[i].x += bullets[i].vx;\n          bullets[i].y += bullets[i].vy;\n          if (!(bullets[i].x + context.canvas.width/2 > context.canvas.width || bullets[i].x + context.canvas.width/2 < 0 || bullets[i].y + context.canvas.height/2  < 0 || bullets[i].y + context.canvas.height/2 > context.canvas.height)) {\n            newBullets.push(bullets[i])\n          }\n          \n        }\n        bullets = newBullets;\n\n        // Move zombies and detect if player died\n        for (let i = 0; i < zombies.length; i++) {\n          const distance = sqrtApprox((zombies[i].x - playerPos.x)**2 + (zombies[i].y - playerPos.y)**2)\n          if (distance < 35) {\n            died = true;\n            setTimeout(() => {\n              setSpawned(false)\n            }, 100)\n          }\n        }\n      }\n\n      \n\n      // Draw frame\n      draw(context, frameCount, {grassImg: grassImg, pistolPlayerImg: pistolPlayerImg, bulletImg:  bulletImg, muzzleFlashImg: muzzleFlashImg, zombieImg: zombieImg})\n      animationFrameId = setTimeout(render, 1000/fps)\n    }\n    render()\n    \n    return () => {\n     clearTimeout(animationFrameId)\n    }\n  }, [draw])\n  \n  return (<>\n    <canvas width={size.width} height={size.height} style={{zIndex: \"-1\", position: \"fixed\", left: \"0vw\", top: \"0vw\"}} ref={canvasRef} {...props}/>\n    {spawned && <button onClick={(e)=> {\n      waveStarted = true; \n      e.target.style.display = \"none\";\n      zombies.push({x: 150, y: 150})\n      }} className={\"textButton strokedText3 pixelFont textColor\"} style={{fontSize: \"3vw\", position: \"absolute\", left: \"1vw\", top: \"1vw\"}}>Start Wave</button>}\n  </>)\n}\n\nexport default Game"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}