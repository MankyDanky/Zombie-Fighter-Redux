{"ast":null,"code":"var _jsxFileName = \"/Users/aadikulsh/Documents/JS Projects/Zombie Fighter Redux/client/src/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport grassTile from \"./sprites/tiles/grass.png\";\nimport pistolPlayer from \"./sprites/player/pistol.png\";\nimport pistolPlayerLeft from \"./sprites/player/pistolLeft.png\";\nimport pistolPlayerRight from \"./sprites/player/pistolRight.png\";\nimport bullet from \"./sprites/projectiles/bullet.png\";\nimport muzzleFlash from \"./sprites/effects/muzzleFlash.png\";\nimport zombie from \"./sprites/enemies/zombie.png\";\nimport zombieLeft from \"./sprites/enemies/zombieLeft.png\";\nimport zombieRight from \"./sprites/enemies/zombieRight.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction sqrtApprox(num) {\n  let s = (num / 2 + num / (num / 2)) / 2;\n  for (let i = 1; i <= 4; i++) {\n    s = (s + num / s) / 2;\n  }\n  return s;\n}\nfunction Game({\n  spawned,\n  setSpawned,\n  ...props\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  let waveStarted = false;\n  let playerPos = {\n    x: 0,\n    y: 0\n  };\n  let wDown = false;\n  let aDown = false;\n  let sDown = false;\n  let dDown = false;\n  let mousePos = {\n    x: 0,\n    y: 0\n  };\n  let playerRotation = 0;\n  let bullets = [];\n  let canShoot = true;\n  let drawFlash = false;\n  let zombies = [];\n  let died = false;\n  let particleEffects = [];\n  function shoot(x, y, spread, speed, offsetX, offsetY) {\n    const direction = playerRotation * -1 - Math.PI / 2 + Math.random() * spread / 100 - spread / 200;\n    let vx = Math.cos(direction) * speed;\n    let vy = Math.sin(direction) * -1 * speed;\n    let xAdd = Math.cos(playerRotation) * offsetX + Math.cos(playerRotation + Math.PI / 2) * offsetY;\n    let yAdd = Math.sin(playerRotation) * offsetX + Math.sin(playerRotation + Math.PI / 2) * offsetY;\n    bullets.push({\n      x: x + xAdd,\n      y: y + yAdd,\n      vx: vx,\n      vy: vy\n    });\n    drawFlash = true;\n  }\n  const draw = (ctx, frameCount, sprites) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Draw background\n    for (let i = 0; i < size.width; i += 48) {\n      for (let j = 0; j < size.height; j += 48) {\n        ctx.save();\n        ctx.translate(i, j);\n        ctx.rotate(Math.PI * (i + j));\n        ctx.drawImage(sprites.grassImg, 0, 0);\n        ctx.restore();\n      }\n    }\n    if (spawned && !died) {\n      // Draw player\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + playerPos.x, ctx.canvas.height / 2 + playerPos.y);\n      ctx.rotate(playerRotation);\n      let img = sprites.pistolPlayerImg;\n      if (wDown !== sDown || aDown !== dDown) {\n        const c = Math.floor(frameCount / 8) % 4;\n        if (c === 1) {\n          img = sprites.pistolPlayerImgRight;\n        } else {\n          img = sprites.pistolPlayerImgLeft;\n        }\n      }\n      ctx.drawImage(img, -sprites.pistolPlayerImg.width / 2, -sprites.pistolPlayerImg.height / 2);\n      ctx.restore();\n    }\n\n    // Draw bullets\n    for (let i = 0; i < bullets.length; i++) {\n      ctx.drawImage(sprites.bulletImg, bullets[i].x + ctx.canvas.width / 2 - sprites.bulletImg.width / 2, bullets[i].y + ctx.canvas.height / 2 - sprites.bulletImg.height / 2);\n    }\n\n    // Draw muzzle flash if necessary\n    if (drawFlash) {\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + playerPos.x, ctx.canvas.height / 2 + playerPos.y);\n      ctx.rotate(playerRotation);\n      ctx.drawImage(sprites.muzzleFlashImg, -sprites.muzzleFlashImg.width / 2 + 5.5, -sprites.muzzleFlashImg.height / 2 + 39);\n      ctx.restore();\n      setTimeout(() => drawFlash = false, 100);\n    }\n\n    // Draw zombies\n    for (let i = 0; i < zombies.length; i++) {\n      ctx.save();\n      ctx.translate(ctx.canvas.width / 2 + zombies[i].x, ctx.canvas.height / 2 + zombies[i].y);\n      ctx.rotate(zombies[i].rotation);\n      let img = sprites.zombieImg;\n      if (wDown !== sDown || aDown !== dDown) {\n        const c = Math.floor(frameCount / 8) % 4;\n        if (c === 1) {\n          img = sprites.zombieImgRight;\n        } else {\n          img = sprites.zombieImgLeft;\n        }\n      }\n      ctx.drawImage(img, -sprites.zombieImg.width / 2, -sprites.zombieImg.height / 2);\n      ctx.restore();\n    }\n\n    // Draw particle effects\n    for (let i = 0; i < particleEffects.length; i++) {\n      ctx.globalAlpha = particleEffects[i].lifespan / 30;\n      ctx.fillStyle = \"red\";\n      ctx.fillRect(particleEffects[i].x + ctx.canvas.width / 2, particleEffects[i].y + ctx.canvas.height / 2, particleEffects[i].size, particleEffects[i].size);\n      ctx.globalAlpha = 1;\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const fps = 60;\n\n    // Load images\n    const grassImg = new Image();\n    grassImg.src = grassTile;\n    const pistolPlayerImg = new Image();\n    pistolPlayerImg.src = pistolPlayer;\n    const pistolPlayerImgLeft = new Image();\n    pistolPlayerImgLeft.src = pistolPlayerLeft;\n    const pistolPlayerImgRight = new Image();\n    pistolPlayerImgRight.src = pistolPlayerRight;\n    const bulletImg = new Image();\n    bulletImg.src = bullet;\n    const muzzleFlashImg = new Image();\n    muzzleFlashImg.src = muzzleFlash;\n    const zombieImg = new Image();\n    zombieImg.src = zombie;\n    const zombieImgLeft = new Image();\n    zombieImgLeft.src = zombieLeft;\n    const zombieImgRight = new Image();\n    zombieImgRight.src = zombieRight;\n\n    // Scale canvas with screen resize\n    let resizeTimer;\n    window.addEventListener('resize', e => {\n      clearTimeout(resizeTimer);\n      resizeTimer = setTimeout(() => setSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      }), 100);\n    });\n\n    // Get mouse movements\n    window.addEventListener(\"mousemove\", e => {\n      mousePos.x = e.clientX;\n      mousePos.y = e.clientY;\n    });\n\n    // Track player inputs\n    document.addEventListener('keydown', event => {\n      if (event.key === 'w') wDown = true;\n      if (event.key === 's') sDown = true;\n      if (event.key === 'd') dDown = true;\n      if (event.key === 'a') aDown = true;\n    });\n    document.addEventListener('keyup', event => {\n      if (event.key === 'w') wDown = false;\n      if (event.key === 's') sDown = false;\n      if (event.key === 'd') dDown = false;\n      if (event.key === 'a') aDown = false;\n    });\n    document.addEventListener('mousedown', event => {\n      if (spawned && canShoot) {\n        shoot(playerPos.x, playerPos.y, 15, 9, 7, 29);\n        canShoot = false;\n        setTimeout(() => canShoot = true, 500);\n      }\n    });\n    let frameCount = 0;\n    let animationFrameId;\n\n    // Game loop\n    const render = () => {\n      frameCount++;\n\n      // Move particles\n      let newParticleEffects = [];\n      for (let i = 0; i < particleEffects.length; i++) {\n        particleEffects[i].x += particleEffects[i].vx;\n        particleEffects[i].vx *= 0.95;\n        particleEffects[i].y += particleEffects[i].vy;\n        particleEffects[i].vy *= 0.95;\n        particleEffects[i].lifespan -= 1;\n        if (particleEffects[i].lifespan > 0) {\n          newParticleEffects.push(particleEffects[i]);\n        }\n      }\n      particleEffects = newParticleEffects;\n      if (!died) {\n        // Move player\n        if (wDown && spawned) playerPos.y -= 4;\n        if (sDown && spawned) playerPos.y += 4;\n        if (aDown && spawned) playerPos.x -= 4;\n        if (dDown && spawned) playerPos.x += 4;\n\n        // Get player rotation\n        const playerScreenPos = {\n          x: playerPos.x + context.canvas.width / 2,\n          y: playerPos.y + context.canvas.height / 2\n        };\n        const dx = mousePos.x - playerScreenPos.x;\n        const dy = mousePos.y - playerScreenPos.y;\n        playerRotation = Math.atan(Math.abs(dy) / Math.abs(dx));\n        if (dx < 0 && dy > 0) {\n          playerRotation += Math.PI;\n        } else if (dx < 0) {\n          playerRotation *= -1;\n          playerRotation += Math.PI;\n        } else if (dy > 0) {\n          playerRotation *= -1;\n          playerRotation += 0;\n        }\n        playerRotation += Math.PI / 2;\n        playerRotation *= -1;\n\n        // Move bullets\n        let newBullets = [];\n        for (let i = bullets.length - 1; i >= 0; i--) {\n          bullets[i].x += bullets[i].vx;\n          bullets[i].y += bullets[i].vy;\n          // Check if it collided with zombie\n          let hitZombie = false;\n          for (let j = zombies.length - 1; j >= 0; j--) {\n            const distance = sqrtApprox((zombies[j].x - bullets[i].x) ** 2 + (zombies[j].y - bullets[i].y) ** 2);\n            if (distance < 25) {\n              hitZombie = true;\n              zombies[j].health -= 10;\n              if (zombies[j].health <= 0) {\n                for (let i = 0; i < 20; i++) {\n                  particleEffects.push({\n                    x: zombies[j].x + Math.random() * 5 - 2.5,\n                    y: zombies[j].y + Math.random() * 5 - 2.5,\n                    vx: Math.random() * 8 - 4,\n                    vy: Math.random() * 8 - 4,\n                    lifespan: 30,\n                    size: 6\n                  });\n                }\n                zombies.splice(j, 1);\n              } else {\n                for (let i = 0; i < 5; i++) {\n                  particleEffects.push({\n                    x: zombies[j].x + Math.random() * 5 - 2.5,\n                    y: zombies[j].y + Math.random() * 5 - 2.5,\n                    vx: Math.random() * 8 - 4,\n                    vy: Math.random() * 8 - 4,\n                    lifespan: 30,\n                    size: 6\n                  });\n                }\n              }\n              break;\n            }\n          }\n          if (!(hitZombie || bullets[i].x + context.canvas.width / 2 > context.canvas.width || bullets[i].x + context.canvas.width / 2 < 0 || bullets[i].y + context.canvas.height / 2 < 0 || bullets[i].y + context.canvas.height / 2 > context.canvas.height)) {\n            newBullets.push(bullets[i]);\n          }\n        }\n        bullets = newBullets;\n\n        // Move zombies and detect if player died\n        for (let i = 0; i < zombies.length; i++) {\n          const dx = playerPos.x - zombies[i].x;\n          const dy = playerPos.y - zombies[i].y;\n          let zombieRotation = Math.atan(Math.abs(dy) / Math.abs(dx));\n          if (dx < 0 && dy > 0) {\n            zombieRotation += Math.PI;\n          } else if (dx < 0) {\n            zombieRotation *= -1;\n            zombieRotation += Math.PI;\n          } else if (dy > 0) {\n            zombieRotation *= -1;\n            zombieRotation += 0;\n          }\n          zombieRotation += Math.PI / 2;\n          zombieRotation *= -1;\n          zombies[i].rotation = zombieRotation;\n          zombies[i].x += -Math.sin(zombieRotation) * zombies[i].speed;\n          zombies[i].y += Math.cos(zombieRotation) * zombies[i].speed;\n          const distance = sqrtApprox((zombies[i].x - playerPos.x) ** 2 + (zombies[i].y - playerPos.y) ** 2);\n          if (distance < 35) {\n            for (let i = 0; i < 20; i++) {\n              particleEffects.push({\n                x: playerPos.x + Math.random() * 5 - 2.5,\n                y: playerPos.y + Math.random() * 5 - 2.5,\n                vx: Math.random() * 8 - 4,\n                vy: Math.random() * 8 - 4,\n                lifespan: 30,\n                size: 6\n              });\n            }\n            died = true;\n            setTimeout(() => {\n              setSpawned(false);\n            }, 1000);\n          }\n        }\n      }\n\n      // Draw frame\n      draw(context, frameCount, {\n        grassImg: grassImg,\n        pistolPlayerImg: pistolPlayerImg,\n        pistolPlayerImgRight: pistolPlayerImgRight,\n        pistolPlayerImgLeft: pistolPlayerImgLeft,\n        bulletImg: bulletImg,\n        muzzleFlashImg: muzzleFlashImg,\n        zombieImg: zombieImg,\n        zombieImgLeft: zombieImgLeft,\n        zombieImgRight: zombieImgRight\n      });\n      animationFrameId = setTimeout(render, 1000 / fps);\n    };\n    render();\n    return () => {\n      clearTimeout(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: size.width,\n      height: size.height,\n      style: {\n        zIndex: \"-1\",\n        position: \"fixed\",\n        left: \"0vw\",\n        top: \"0vw\"\n      },\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }, this), spawned && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => {\n        waveStarted = true;\n        e.target.style.display = \"none\";\n        zombies.push({\n          x: 150,\n          y: 150,\n          health: 100,\n          speed: 4,\n          rotation: 0\n        });\n      },\n      className: \"textButton strokedText3 pixelFont textColor\",\n      style: {\n        fontSize: \"3vw\",\n        position: \"absolute\",\n        left: \"1vw\",\n        top: \"1vw\"\n      },\n      children: \"Start Wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"puhKU6xUq7Q7hi5BXB6BjdEOaU0=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useRef","useEffect","useState","grassTile","pistolPlayer","pistolPlayerLeft","pistolPlayerRight","bullet","muzzleFlash","zombie","zombieLeft","zombieRight","jsxDEV","_jsxDEV","Fragment","_Fragment","sqrtApprox","num","s","i","Game","spawned","setSpawned","props","_s","canvasRef","size","setSize","width","window","innerWidth","height","innerHeight","waveStarted","playerPos","x","y","wDown","aDown","sDown","dDown","mousePos","playerRotation","bullets","canShoot","drawFlash","zombies","died","particleEffects","shoot","spread","speed","offsetX","offsetY","direction","Math","PI","random","vx","cos","vy","sin","xAdd","yAdd","push","draw","ctx","frameCount","sprites","clearRect","canvas","j","save","translate","rotate","drawImage","grassImg","restore","img","pistolPlayerImg","c","floor","pistolPlayerImgRight","pistolPlayerImgLeft","length","bulletImg","muzzleFlashImg","setTimeout","rotation","zombieImg","zombieImgRight","zombieImgLeft","globalAlpha","lifespan","fillStyle","fillRect","current","context","getContext","fps","Image","src","resizeTimer","addEventListener","e","clearTimeout","clientX","clientY","document","event","key","animationFrameId","render","newParticleEffects","playerScreenPos","dx","dy","atan","abs","newBullets","hitZombie","distance","health","splice","zombieRotation","children","style","zIndex","position","left","top","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","target","display","className","fontSize","_c","$RefreshReg$"],"sources":["/Users/aadikulsh/Documents/JS Projects/Zombie Fighter Redux/client/src/Game.js"],"sourcesContent":["import React, { useRef, useEffect, useState} from 'react'\nimport grassTile from \"./sprites/tiles/grass.png\"\nimport pistolPlayer from \"./sprites/player/pistol.png\"\nimport pistolPlayerLeft from \"./sprites/player/pistolLeft.png\";\nimport pistolPlayerRight from \"./sprites/player/pistolRight.png\";\nimport bullet from \"./sprites/projectiles/bullet.png\"\nimport muzzleFlash from \"./sprites/effects/muzzleFlash.png\"\nimport zombie from \"./sprites/enemies/zombie.png\"\nimport zombieLeft from \"./sprites/enemies/zombieLeft.png\";\nimport zombieRight from \"./sprites/enemies/zombieRight.png\"\n\nfunction sqrtApprox(num) {\n  let s = ((num/2) + num/(num/2))/2;\n  for (let i = 1; i <= 4; i++) {\n    s = (s+num/s)/2\n  }\n  return s\n}\n\nfunction Game({spawned, setSpawned, ...props}) {\n  \n  const canvasRef = useRef(null)\n  const [size, setSize] = useState({width: window.innerWidth, height: window.innerHeight})\n  let waveStarted = false\n  let playerPos = {x: 0, y: 0};\n  let wDown = false;\n  let aDown = false;\n  let sDown = false;\n  let dDown = false;\n  let mousePos = {x: 0, y: 0};\n  let playerRotation = 0;\n  let bullets = []\n  let canShoot = true;\n  let drawFlash = false;\n  let zombies = []\n  let died = false;\n  let particleEffects = []\n  \n  function shoot (x, y, spread, speed, offsetX, offsetY) {\n    const direction = (playerRotation * -1) - Math.PI/2 + Math.random()*spread/100-spread/200;\n    let vx = Math.cos(direction) * speed;\n    let vy = Math.sin(direction) * -1 * speed;\n    let xAdd = Math.cos(playerRotation) * offsetX + Math.cos(playerRotation + Math.PI/2) * offsetY;\n    let yAdd = (Math.sin(playerRotation) * offsetX + Math.sin(playerRotation + Math.PI/2) * offsetY);\n    bullets.push({x: x + xAdd, y: y + yAdd, vx: vx, vy: vy})\n    drawFlash = true;\n  }\n\n  const draw = (ctx, frameCount, sprites) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    // Draw background\n    for (let i = 0; i < size.width; i+= 48) {\n      for (let j = 0; j < size.height; j+= 48) {\n        ctx.save();\n        \n        ctx.translate(i, j)\n        ctx.rotate(Math.PI*(i + j))\n        ctx.drawImage(sprites.grassImg, 0, 0)\n        ctx.restore()\n      }\n    }\n\n    if (spawned && !died) {\n      // Draw player\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + playerPos.x, ctx.canvas.height/2 + playerPos.y)\n      ctx.rotate(playerRotation)\n      let img = sprites.pistolPlayerImg;\n      if (wDown !== sDown || aDown !== dDown) {\n        const c = Math.floor(frameCount/8) % 4;\n        if (c === 1) {\n          img = sprites.pistolPlayerImgRight;\n        } else {\n          img = sprites.pistolPlayerImgLeft;\n        }\n      }\n      ctx.drawImage(img, -sprites.pistolPlayerImg.width/2, -sprites.pistolPlayerImg.height/2)\n      ctx.restore()\n    }\n    \n    // Draw bullets\n    for (let i = 0; i < bullets.length; i++) {\n      ctx.drawImage(sprites.bulletImg, bullets[i].x + ctx.canvas.width/2 - sprites.bulletImg.width/2, bullets[i].y + ctx.canvas.height/2  - sprites.bulletImg.height/2);\n    }\n\n    // Draw muzzle flash if necessary\n    if (drawFlash) {\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + playerPos.x, ctx.canvas.height/2 + playerPos.y)\n      ctx.rotate(playerRotation)\n      ctx.drawImage(sprites.muzzleFlashImg, -sprites.muzzleFlashImg.width/2 + 5.5, -sprites.muzzleFlashImg.height/2 + 39)\n      ctx.restore()\n      setTimeout(() => drawFlash=false, 100)\n    }\n\n    // Draw zombies\n    for (let i = 0; i < zombies.length; i++) {\n      ctx.save()\n      ctx.translate(ctx.canvas.width/2 + zombies[i].x, ctx.canvas.height/2 + zombies[i].y)\n      ctx.rotate(zombies[i].rotation)\n      let img = sprites.zombieImg;\n      if (wDown !== sDown || aDown !== dDown) {\n        const c = Math.floor(frameCount/8) % 4;\n        if (c === 1) {\n          img = sprites.zombieImgRight;\n        } else {\n          img = sprites.zombieImgLeft;\n        }\n      }\n      ctx.drawImage(img, -sprites.zombieImg.width/2, -sprites.zombieImg.height/2)\n      ctx.restore()\n    }\n\n    // Draw particle effects\n    for (let i = 0; i < particleEffects.length; i++) {\n      ctx.globalAlpha = particleEffects[i].lifespan/30\n      ctx.fillStyle = \"red\"\n      ctx.fillRect(particleEffects[i].x + ctx.canvas.width/2, particleEffects[i].y + ctx.canvas.height/2, particleEffects[i].size, particleEffects[i].size)\n      ctx.globalAlpha=1;\n    }\n    \n  }\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    const fps = 60;\n\n    // Load images\n    const grassImg = new Image();\n    grassImg.src=grassTile;\n    const pistolPlayerImg = new Image();\n    pistolPlayerImg.src=pistolPlayer\n    const pistolPlayerImgLeft = new Image();\n    pistolPlayerImgLeft.src = pistolPlayerLeft;\n    const pistolPlayerImgRight = new Image();\n    pistolPlayerImgRight.src = pistolPlayerRight;\n    const bulletImg = new Image();\n    bulletImg.src = bullet;\n    const muzzleFlashImg = new Image();\n    muzzleFlashImg.src = muzzleFlash;\n    const zombieImg = new Image();\n    zombieImg.src = zombie;\n    const zombieImgLeft = new Image();\n    zombieImgLeft.src = zombieLeft;\n    const zombieImgRight = new Image();\n    zombieImgRight.src = zombieRight;\n  \n    // Scale canvas with screen resize\n    let resizeTimer;\n    window.addEventListener('resize', (e) => {\n      clearTimeout(resizeTimer)\n      resizeTimer = setTimeout(() => setSize({width: window.innerWidth, height: window.innerHeight }), 100)\n    })\n\n    // Get mouse movements\n    window.addEventListener(\"mousemove\", (e) => {\n      mousePos.x = e.clientX;\n      mousePos.y = e.clientY;\n    })\n\n    // Track player inputs\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'w') wDown = true;\n      if (event.key === 's') sDown = true;\n      if (event.key === 'd') dDown = true;\n      if (event.key === 'a') aDown = true;\n    });\n\n    document.addEventListener('keyup', (event) => {\n      if (event.key === 'w') wDown = false;\n      if (event.key === 's') sDown = false;\n      if (event.key === 'd') dDown = false;\n      if (event.key === 'a') aDown = false;\n    });\n\n    document.addEventListener('mousedown', (event) => {\n      if (spawned && canShoot) {\n        shoot(playerPos.x, playerPos.y, 15, 9, 7, 29);\n        canShoot = false;\n        setTimeout(() => canShoot = true, 500)\n      }\n      \n    })\n\n    let frameCount = 0\n    let animationFrameId\n    \n    // Game loop\n    const render = () => {\n      frameCount++\n      \n      // Move particles\n      let newParticleEffects = []\n      for (let i = 0; i < particleEffects.length; i++) {\n        particleEffects[i].x += particleEffects[i].vx;\n        particleEffects[i].vx *= 0.95;\n        particleEffects[i].y += particleEffects[i].vy;\n        particleEffects[i].vy *= 0.95;\n        particleEffects[i].lifespan -= 1;\n        if (particleEffects[i].lifespan > 0) {\n          newParticleEffects.push(particleEffects[i]);\n        }\n        \n      }\n      particleEffects = newParticleEffects;\n\n      if (!died) {\n        // Move player\n        if (wDown && spawned) playerPos.y -= 4;\n        if (sDown && spawned) playerPos.y += 4;\n        if (aDown && spawned) playerPos.x -= 4;\n        if (dDown && spawned) playerPos.x += 4;\n\n        // Get player rotation\n        const playerScreenPos = {x: playerPos.x + context.canvas.width/2, y: playerPos.y + context.canvas.height/2}\n        const dx = mousePos.x - playerScreenPos.x;\n        const dy = mousePos.y - playerScreenPos.y;\n        playerRotation = Math.atan(Math.abs(dy)/Math.abs(dx))\n        if(dx < 0 && dy > 0) {\n          playerRotation += Math.PI;\n        }\n        else if (dx < 0) {\n          playerRotation *= -1\n          playerRotation += Math.PI;\n        }\n        else if (dy > 0) {\n          playerRotation *= -1;\n          playerRotation += 0;\n        }\n        playerRotation += Math.PI/2;\n        playerRotation *= -1\n      \n        // Move bullets\n        let newBullets = []\n        for (let i = bullets.length-1; i >= 0; i--) {\n          bullets[i].x += bullets[i].vx;\n          bullets[i].y += bullets[i].vy;\n          // Check if it collided with zombie\n          let hitZombie = false;\n          for (let j = zombies.length-1; j >= 0; j--) {\n            const distance = sqrtApprox((zombies[j].x - bullets[i].x)**2 + (zombies[j].y - bullets[i].y)**2)\n            if (distance < 25) {\n              hitZombie = true;\n              zombies[j].health -= 10;\n              if (zombies[j].health <= 0) {\n                for (let i = 0; i < 20; i++) {\n                  particleEffects.push({x: zombies[j].x + Math.random() * 5 - 2.5, y: zombies[j].y + Math.random() * 5 - 2.5, vx: Math.random()*8 - 4, vy: Math.random()*8 -4, lifespan: 30, size: 6})\n                }\n                zombies.splice(j, 1);\n              } else {\n                for (let i = 0; i < 5; i++) {\n                  particleEffects.push({x: zombies[j].x + Math.random() * 5 - 2.5, y: zombies[j].y + Math.random() * 5 - 2.5, vx: Math.random()*8 - 4, vy: Math.random()*8 -4, lifespan: 30, size: 6})\n                }\n              }\n              break;\n            }\n          }\n\n          if (!(hitZombie || bullets[i].x + context.canvas.width/2 > context.canvas.width || bullets[i].x + context.canvas.width/2 < 0 || bullets[i].y + context.canvas.height/2  < 0 || bullets[i].y + context.canvas.height/2 > context.canvas.height)) {\n            newBullets.push(bullets[i])\n          }\n        }\n        bullets = newBullets;\n\n        // Move zombies and detect if player died\n        for (let i = 0; i < zombies.length; i++) {\n          const dx = playerPos.x - zombies[i].x;\n          const dy = playerPos.y - zombies[i].y;\n          let zombieRotation = Math.atan(Math.abs(dy)/Math.abs(dx))\n          if(dx < 0 && dy > 0) {\n            zombieRotation += Math.PI;\n          }\n          else if (dx < 0) {\n            zombieRotation *= -1\n            zombieRotation += Math.PI;\n          }\n          else if (dy > 0) {\n            zombieRotation *= -1;\n            zombieRotation += 0;\n          }\n          zombieRotation += Math.PI/2;\n          zombieRotation *= -1\n          zombies[i].rotation = zombieRotation;\n          zombies[i].x += -Math.sin(zombieRotation)*zombies[i].speed;\n          zombies[i].y += Math.cos(zombieRotation)*zombies[i].speed;\n\n          const distance = sqrtApprox((zombies[i].x - playerPos.x)**2 + (zombies[i].y - playerPos.y)**2)\n          if (distance < 35) {\n            for (let i = 0; i < 20; i++) {\n              particleEffects.push({x: playerPos.x + Math.random() * 5 - 2.5, y: playerPos.y + Math.random() * 5 - 2.5, vx: Math.random()*8 - 4, vy: Math.random()*8 -4, lifespan: 30, size: 6})\n            }\n            died = true;\n            setTimeout(() => {\n              setSpawned(false)\n            }, 1000)\n          }\n        }\n      }\n\n      \n\n      // Draw frame\n      draw(context, frameCount, {\n        grassImg: grassImg, \n        pistolPlayerImg: pistolPlayerImg, \n        pistolPlayerImgRight: pistolPlayerImgRight, \n        pistolPlayerImgLeft: pistolPlayerImgLeft, \n        bulletImg:  bulletImg, \n        muzzleFlashImg: muzzleFlashImg, \n        zombieImg: zombieImg,\n        zombieImgLeft: zombieImgLeft,\n        zombieImgRight: zombieImgRight\n      })\n      animationFrameId = setTimeout(render, 1000/fps)\n    }\n    render()\n    \n    return () => {\n     clearTimeout(animationFrameId)\n    }\n  }, [draw])\n  \n  return (<>\n    <canvas width={size.width} height={size.height} style={{zIndex: \"-1\", position: \"fixed\", left: \"0vw\", top: \"0vw\"}} ref={canvasRef} {...props}/>\n    {spawned && <button onClick={(e)=> {\n      waveStarted = true; \n      e.target.style.display = \"none\";\n      zombies.push({x: 150, y: 150, health: 100, speed: 4, rotation: 0})\n      }} className={\"textButton strokedText3 pixelFont textColor\"} style={{fontSize: \"3vw\", position: \"absolute\", left: \"1vw\", top: \"1vw\"}}>Start Wave</button>}\n  </>)\n}\n\nexport default Game"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}